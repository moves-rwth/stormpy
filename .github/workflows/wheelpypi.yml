name: Build and upload to PyPI

on:
  workflow_dispatch:
  pull_request:
  push:
#    branches:
#      - main
  release:
    types:
      - published

jobs:
  build_wheels:
    name: Build wheels for ${{ matrix.os }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        os: [ linux-intel, macOS-intel, macOS-arm ]
        include:
          - archs: auto
            platform: auto
            xcode: ""
          - os: linux-intel
            runs-on: ubuntu-latest
            archs: x86_64
#          - os: linux-arm
#            runs-on: ubuntu-24.04-arm
          - os: macos-intel
            # macos-13 was the last x86_64 runner
            runs-on: macos-13
            xcode: 14.3
          - os: macos-arm
            # macos-14+ (including latest) are ARM64 runners
            runs-on: macos-14
#            archs: auto,universal2
            xcode: 15.3
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: maxim-lobanov/setup-xcode@v1
        if: ${{ matrix.xcode != '' }}
        with:
          xcode-version: ${{ matrix.xcode }}
      - name: Build wheels
        uses: pypa/cibuildwheel@v3.0.0b5
        env:
          CIBW_PLATFORM: ${{ matrix.platform }}
          CIBW_ARCHS: ${{ matrix.archs }}
          MACOSX_DEPLOYMENT_TARGET: 14.0
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  test_wheels_linux:
    name: Test wheels on different Linux distros
    needs: [build_wheels]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro:
          - ubuntu:22.04
          - debian:bullseye
          - fedora:latest
          - archlinux:latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-linux-intel-*
          path: dist
          merge-multiple: true
      - name: Run test in ${{ matrix.distro }}
        run: |
          docker run --rm -v dist:/wheel \
            ${{ matrix.distro }} /bin/bash -c "
              set -euo pipefail

              cd /wheel

              # Install Python & pip (varies per distro)
              if command -v apt; then
                apt update && apt install -y python3 python3-pip
              elif command -v dnf; then
                dnf install -y python3 python3-pip
              elif command -v pacman; then
                pacman -Syu --noconfirm python python-pip
              fi

              # Get major+minor version (e.g. “311” for Python 3.11)
              PY_VER=$(python3 - <<'EOF'
              import sys
              print(f"{sys.version_info.major}{sys.version_info.minor}")
              EOF
              )

              # Look for a matching wheel in the current directory
              WHEEL=$(ls stormpy-*-cp${PY_VER}-*.whl 2>/dev/null | head -n1 || true)
              if [[ -z "$WHEEL" ]]; then
                echo "Error: No stormpy wheel found for Python ${PY_VER:0:1}.${PY_VER:1}." >&2
                exit 1
              fi

              echo "Installing $WHEEL using $PYTHON..."
              # Install via pip
              python3 -m pip install --upgrade pip   # optional: ensure pip is up-to-date
              python3 -m pip install "$WHEEL"

              # Run a basic import test (replace with pytest if needed)
              python3 -c 'import your_package; print(\"Import successful\")'
            "

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    # if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/