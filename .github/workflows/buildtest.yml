name: Build Test
# Builds and tests stormpy with different versions of Storm
# also deploys images to Dockerhub

on:
  push:
    branches:
      - master
  schedule:
    # run weekly
    - cron: '0 10 * * 3'
  # needed to trigger the workflow manually
  workflow_dispatch:
  pull_request:

env:
  GIT_URL: "${{ github.server_url }}/${{ github.repository }}.git"
  BRANCH: "${{ github.ref }}"
  # github runners currently have two cores
  NR_JOBS: "2"
  CMAKE_DEBUG: "-DCMAKE_BUILD_TYPE=Debug"
  CMAKE_RELEASE: "-DCMAKE_BUILD_TYPE=Release"

  CARL_PARSER_GIT_URL: "https://github.com/ths-rwth/carl-parser"
  CARL_PARSER_BRANCH: "master14"
  PYCARL_GIT_URL: "https://github.com/moves-rwth/pycarl.git"
  PYCARL_BRANCH: "master"


jobs:
  noDeploy:
    name: Test on stable
    runs-on: ubuntu-latest
    env:
      RELEASE_IMG: "storm:1.6.4"
      DEBUG_IMG: "storm:1.6.4-debug"
      PYTHON: "python3"
    strategy:
      matrix:
        debugOrRelease: ["debug", "release"]

    # Allow failures of stable versions as new features might have been added
    steps:
      - name: Setup environment variables
        # this is strangely the best way to implement environment variables based on the value of another
        # GITHUB_ENV is a magic variable pointing to a file; if a line with format {NAME}={VALUE}
        # then the env variable with name NAME will be created/updated with VALUE
        run: |
          ([[ ${{ matrix.debugOrRelease }} == "debug" ]] && echo "CMAKE_ARGS=${CMAKE_DEBUG}" || echo "CMAKE_ARGS=${CMAKE_RELEASE}") >> $GITHUB_ENV
          ([[ ${{ matrix.debugOrRelease }} == "debug" ]] && echo "IMG=${DEBUG_IMG}" || echo "IMG=${RELEASE_IMG}") >> $GITHUB_ENV
          ([[ ${{ matrix.debugOrRelease }} == "debug" ]] && echo "DEBUG_SWITCH=--debug" || true) >> $GITHUB_ENV
      - name: Init Docker
        run: sudo docker run -d -it --name storm --privileged movesrwth/$IMG
        # We should not do partial updates :/
        # but we need to install some dependencies
        # Surely we can find a better way to do this at some point
      - name: Update base system
        run: |
          sudo docker exec storm apt-get update
          sudo docker exec storm apt-get upgrade -qqy
      - name: install dependencies
        run: sudo docker exec storm apt-get install -qq -y maven uuid-dev python python3 virtualenv
      - name: Git clone
        run: |
          # git clone cannot clone individual commits based on a sha and some other refs
          # this workaround fixes this and fetches only one commit
          sudo docker exec storm bash -c "mkdir /opt/stormpy; cd /opt/stormpy; git init && git remote add origin ${GIT_URL} && git fetch --depth 1 origin ${BRANCH} && git checkout FETCH_HEAD"
          sudo docker exec storm git clone --depth 1 --branch $CARL_PARSER_BRANCH $CARL_PARSER_GIT_URL /opt/carl-parser
          sudo docker exec storm git clone --depth 1 --branch $PYCARL_BRANCH $PYCARL_GIT_URL /opt/pycarl
      - name: Run cmake for carl-parser
        run: sudo docker exec storm bash -c "mkdir /opt/carl-parser/build; cd /opt/carl-parser/build; cmake .. ${CMAKE_ARGS}"
      - name: make carl-parser
        run: sudo docker exec storm bash -c "cd /opt/carl-parser/build; make -j ${NR_JOBS}"

      - name: Setup virtualenv
        run: |
          sudo docker exec storm bash -c "cd /opt; virtualenv --python=${PYTHON} venv; source venv/bin/activate; python --version"
      - name: Build pycarl
        run: |
          sudo docker exec storm bash -c "cd /opt; source venv/bin/activate; cd /opt/pycarl; python setup.py build_ext $DEBUG_SWITCH -j ${NR_JOBS} develop"
      - name: Build stormpy
        id: build_stormpy
        shell: bash {0} // Deactivate fast-fail to handle exit code for incompatibility
        run: |
          sudo docker exec storm bash -c "cd /opt; source venv/bin/activate; cd /opt/stormpy; python setup.py build_ext --storm-dir /opt/storm/build/ $DEBUG_SWITCH -j ${NR_JOBS} develop"
          status=$?
          if [ $status -eq 42 ]; then
            # Warn about incompatibility but do not handle as failure
            echo "::warning file=setup.py,line=82::Stormpy is incompatible with stable version of Storm"
            # Deactivate tests
            echo "::set-output name=run_tests::false"
          else
            echo "::set-output name=run_tests::true"
            exit $status
          fi
      - name: Run tests
        if: steps.build_stormpy.outputs.run_tests == 'true'
        run: |
          # Install dependencies for tests
          # numpy is used in sphinx tests
          sudo docker exec storm bash -c "cd /opt; source venv/bin/activate; pip install numpy"
          sudo docker exec storm bash -c "cd /opt; source venv/bin/activate; pip install pytest"
          sudo docker exec storm bash -c "cd /opt; source venv/bin/activate; cd /opt/stormpy; python setup.py test"

  deploy:
    name: Test and Deploy on latest
    runs-on: ubuntu-latest
    env:
      RELEASE_IMG: "storm:ci-release"
      DEBUG_IMG: "storm:ci-debug"
      PYTHON: "python3"
    strategy:
      matrix:
        debugOrRelease: ["debug", "release"]
    steps:
      - name: Setup environment variables
        # this is strangely the best way to implement environment variables based on the value of another
        # GITHUB_ENV is a magic variable pointing to a file; if a line with format {NAME}={VALUE}
        # then the env variable with name NAME will be created/updated with VALUE
        run: |
          ([[ ${{ matrix.debugOrRelease }} == "debug" ]] && echo "CMAKE_ARGS=${CMAKE_DEBUG}" || echo "CMAKE_ARGS=${CMAKE_RELEASE}") >> $GITHUB_ENV
          ([[ ${{ matrix.debugOrRelease }} == "debug" ]] && echo "IMG=${DEBUG_IMG}" || echo "IMG=${RELEASE_IMG}") >> $GITHUB_ENV
          ([[ ${{ matrix.debugOrRelease }} == "debug" ]] && echo "DEBUG_SWITCH=--debug" || true) >> $GITHUB_ENV

      - name: Login into docker
        # Only login if using master on original repo (and not for pull requests or forks)
        if: github.repository_owner == 'moves-rwth' && github.ref == 'refs/heads/master'
        run: echo "${{ secrets.STORM_CI_DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.STORM_CI_DOCKER_USERNAME }}" --password-stdin
      - name: Init Docker
        run: sudo docker run -d -it --name storm --privileged movesrwth/$IMG

        # We should not do partial updates :/
        # but we need to install some dependencies
        # Surely we can find a better way to do this at some point
      - name: Update base system
        run: |
          sudo docker exec storm apt-get update
          sudo docker exec storm apt-get upgrade -qqy
      - name: install dependencies
        run: sudo docker exec storm apt-get install -qq -y maven uuid-dev python3 virtualenv
      - name: Git clone
        run: |
          # git clone cannot clone individual commits based on a sha and some other refs
          # this workaround fixes this and fetches only one commit
          sudo docker exec storm bash -c "mkdir /opt/stormpy; cd /opt/stormpy; git init && git remote add origin ${GIT_URL} && git fetch --depth 1 origin ${BRANCH} && git checkout FETCH_HEAD"
          sudo docker exec storm git clone --depth 1 --branch $CARL_PARSER_BRANCH $CARL_PARSER_GIT_URL /opt/carl-parser
          sudo docker exec storm git clone --depth 1 --branch $PYCARL_BRANCH $PYCARL_GIT_URL /opt/pycarl
      - name: Run cmake for carl-parser
        run: sudo docker exec storm bash -c "mkdir /opt/carl-parser/build; cd /opt/carl-parser/build; cmake .. ${CMAKE_ARGS}"
      - name: make carl-parser
        run: sudo docker exec storm bash -c "cd /opt/carl-parser/build; make -j ${NR_JOBS}"

      - name: Setup virtualenv
        run: |
          sudo docker exec storm bash -c "cd /opt; virtualenv --python=${PYTHON} venv; source venv/bin/activate; python --version"
      - name: Build pycarl
        run: |
          sudo docker exec storm bash -c "cd /opt; source venv/bin/activate; cd /opt/pycarl; python setup.py build_ext $DEBUG_SWITCH -j ${NR_JOBS} develop"
      - name: Build stormpy
        run: |
          sudo docker exec storm bash -c "cd /opt; source venv/bin/activate; cd /opt/stormpy; python setup.py build_ext --storm-dir /opt/storm/build/ $DEBUG_SWITCH -j ${NR_JOBS} develop"
      - name: Run tests
        run: |
          # Install dependencies for tests
          # numpy is used in sphinx tests
          sudo docker exec storm bash -c "cd /opt; source venv/bin/activate; pip install numpy"
          sudo docker exec storm bash -c "cd /opt; source venv/bin/activate; pip install pytest"
          sudo docker exec storm bash -c "cd /opt; source venv/bin/activate; cd /opt/stormpy; python setup.py test"

      - name: Deploy stormpy
        # Only deploy if using master on original repo (and not for pull requests or forks)
        if: github.repository_owner == 'moves-rwth' && github.ref == 'refs/heads/master'
        run: |
          sudo docker commit storm movesrwth/stormpy:ci-${{ matrix.debugOrRelease }}
          sudo docker push movesrwth/stormpy:ci-${{ matrix.debugOrRelease }}

      - name: Install documentation dependencies
        if: matrix.debugOrRelease == 'release'
        run: |
          sudo docker exec storm apt-get install -qq -y pandoc
          sudo docker exec storm bash -c "cd /opt; source venv/bin/activate; cd stormpy; pip install -e '.[doc,numpy]'"
      - name: Build documentation
        if: matrix.debugOrRelease == 'release'
        run: |
          sudo docker exec storm bash -c "cd /opt; source venv/bin/activate; cd stormpy/doc; make html"
          sudo docker exec storm rm -r /opt/stormpy/doc/build/html/_sources
          sudo docker cp storm:/opt/stormpy/doc/build/html .
      - name: Deploy documentation
        # Only deploy for release version and using master on original repo (and not for pull requests or forks)
        if: matrix.debugOrRelease == 'release' && github.repository_owner == 'moves-rwth' && github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./html

  notify:
    name: Email notification
    runs-on: ubuntu-latest
    needs: [noDeploy, deploy]
    # Only run in main repo and even if previous step failed
    if: github.repository_owner == 'moves-rwth' && always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - uses: dawidd6/action-send-mail@v2
        with:
          server_address: ${{ secrets.STORM_CI_MAIL_SERVER }}
          server_port: 587
          username: ${{ secrets.STORM_CI_MAIL_USERNAME }}
          password: ${{ secrets.STORM_CI_MAIL_PASSWORD }}
          subject: "[You broke it] CI run failed for ${{ github.repository }}"
          body:
            "CI job of ${{ github.repository }} has failed for commit ${{ github.sha }}.\n\
            The error type is: ${{ env.WORKFLOW_CONCLUSION }}.\n\n\
            For more information, see https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          to: ${{ secrets.STORM_CI_MAIL_RECIPIENTS }}
          from: Github Actions <you-broke-it@stormchecker.org>
        if: env.WORKFLOW_CONCLUSION != 'success' # notify only if failure
